{"uid":"d48302e0b4dcb553","name":"Scenario Outline name: Verify that the Update API will be fails if expiration date has invalid formatted date","fullName":"features.APITests.steps.test_update_steps#test_scenario_outline_name_verify_that_the_update_api_will_be_fails_if_expiration_date_has_invalid_formatted_date","historyId":"cbdda820d868d681ed4c17002e446885","time":{"start":1760012624016,"stop":1760012636339,"duration":12323},"description":"/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/update.feature: Scenario Outline name: Verify that the Update API will be fails if expiration date has invalid formatted date","descriptionHtml":"<p>/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/update.feature: Scenario Outline name: Verify that the Update API will be fails if expiration date has invalid formatted date</p>\n","status":"failed","statusMessage":"AssertionError: Expected status code 204, but got 404. Response: {'resourceType': 'OperationOutcome', 'id': '4babcea3-0db7-495c-8fdf-95776b3355e9', 'meta': {'profile': ['https://simplifier.net/guide/UKCoreDevelopment2/ProfileUKCore-OperationOutcome']}, 'issue': [{'severity': 'error', 'code': 'not-found', 'details': {'coding': [{'system': 'https://fhir.nhs.uk/Codesystem/http-error-codes', 'code': 'NOT-FOUND'}]}, 'diagnostics': 'Immunization resource does not exist. ID: None'}]}\nassert 404 == 204\n +  where 404 = <Response [404]>.status_code\n +    where <Response [404]> = <utilities.context.ScenarioContext object at 0x7f2a8d0bdc90>.response","statusTrace":"fixturefunc = <function validVaccinationRecordIsCreated at 0x7f2a8e0a3240>\nrequest = <FixtureRequest for <Function test_scenario_outline_name_verify_that_the_update_api_will_be_fails_if_expiration_date_has_invalid_formatted_date[empty]>>\nkwargs = {'context': <utilities.context.ScenarioContext object at 0x7f2a8d0bdc90>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfeatures/APITests/steps/common_steps.py:45: in validVaccinationRecordIsCreated\n    The_request_will_have_status_code(context, 201)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <utilities.context.ScenarioContext object at 0x7f2a8d0bdc90>\nstatusCode = 201\n\n    @then(parsers.parse(\"The request will be unsuccessful with the status code '{statusCode}'\"))\n    @then(parsers.parse(\"The request will be successful with the status code '{statusCode}'\"))\n    def The_request_will_have_status_code(context, statusCode):\n        print(context.response.status_code)\n        print(int(statusCode))\n>       assert context.response.status_code == int(statusCode), f\"\\n Expected status code: {statusCode}, but got: {context.response.status_code}. Response: {context.response.json()} \\n\"\nE       AssertionError: \nE        Expected status code: 201, but got: 502. Response: {'fault': {'faultstring': 'Unexpected EOF at target', 'detail': {'errorcode': 'messaging.adaptors.http.flow.UnexpectedEOFAtTarget'}}}\n\nfeatures/APITests/steps/common_steps.py:66: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <HookCaller 'pytest_bdd_after_scenario'>\nkwargs = {'feature': Feature(scenarios=OrderedDict([('Verify that the Update API will be successful with all the valid paramete...tion='', tags={'vaccine_type_RSV', 'patient_id_Mod11_NHS', 'supplier_name_Postman_Auth', 'Delete_cleanUp'}, rule=None)}\nfirstresult = False\n\n    def __call__(self, **kwargs: object) -> Any:\n        \"\"\"Call the hook.\n    \n        Only accepts keyword arguments, which should match the hook\n        specification.\n    \n        Returns the result(s) of calling all registered plugins, see\n        :ref:`calling`.\n        \"\"\"\n        assert (\n            not self.is_historic()\n        ), \"Cannot directly call a historic hook - use call_historic instead.\"\n        self._verify_all_args_are_provided(kwargs)\n        firstresult = self.spec.opts.get(\"firstresult\", False) if self.spec else False\n        # Copy because plugins may register other plugins during iteration (#438).\n>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\nvenv/lib/python3.11/site-packages/pluggy/_hooks.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <FixtureRequest for <Function test_scenario_outline_name_verify_that_the_update_api_will_be_fails_if_expiration_date_has_invalid_formatted_date[empty]>>\nfeature = Feature(scenarios=OrderedDict([('Verify that the Update API will be successful with all the valid parameters', Scenari..., name='Update the immunization of a patient', tags={'Update_Feature'}, background=None, line_number=2, description='')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Verify that the Update API will be successful with all the valid par...ption='', tags={'vaccine_type_RSV', 'patient_id_Mod11_NHS', 'supplier_name_Postman_Auth', 'Delete_cleanUp'}, rule=None)\n\n    def pytest_bdd_after_scenario(request, feature, scenario):\n        tags = set(getattr(scenario, 'tags', [])) | set(getattr(feature, 'tags', []))\n        context = request.getfixturevalue('context')\n        get_delete_url_header(context)\n    \n        if 'Delete_cleanUp' in tags:\n            print(f\"\\n Delete Request is {context.url}/{context.ImmsID}\")\n            context.response = requests.delete(f\"{context.url}/{context.ImmsID}\", headers=context.headers)\n>           assert context.response.status_code == 204, f\"Expected status code 204, but got {context.response.status_code}. Response: {context.response.json()}\"\nE           AssertionError: Expected status code 204, but got 404. Response: {'resourceType': 'OperationOutcome', 'id': '4babcea3-0db7-495c-8fdf-95776b3355e9', 'meta': {'profile': ['https://simplifier.net/guide/UKCoreDevelopment2/ProfileUKCore-OperationOutcome']}, 'issue': [{'severity': 'error', 'code': 'not-found', 'details': {'coding': [{'system': 'https://fhir.nhs.uk/Codesystem/http-error-codes', 'code': 'NOT-FOUND'}]}, 'diagnostics': 'Immunization resource does not exist. ID: None'}]}\nE           assert 404 == 204\nE            +  where 404 = <Response [404]>.status_code\nE            +    where <Response [404]> = <utilities.context.ScenarioContext object at 0x7f2a8d0bdc90>.response\n\nfeatures/conftest.py:86: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_environment","time":{"start":1760012101129,"stop":1760012101130,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"global_context","time":{"start":1760012101132,"stop":1760012102788,"duration":1656},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"context","time":{"start":1760012624016,"stop":1760012625627,"duration":1611},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/update.feature: Scenario Outline name: Verify that the Update API will be fails if expiration date has invalid formatted date","status":"failed","statusMessage":"AssertionError: Expected status code 204, but got 404. Response: {'resourceType': 'OperationOutcome', 'id': '4babcea3-0db7-495c-8fdf-95776b3355e9', 'meta': {'profile': ['https://simplifier.net/guide/UKCoreDevelopment2/ProfileUKCore-OperationOutcome']}, 'issue': [{'severity': 'error', 'code': 'not-found', 'details': {'coding': [{'system': 'https://fhir.nhs.uk/Codesystem/http-error-codes', 'code': 'NOT-FOUND'}]}, 'diagnostics': 'Immunization resource does not exist. ID: None'}]}\nassert 404 == 204\n +  where 404 = <Response [404]>.status_code\n +    where <Response [404]> = <utilities.context.ScenarioContext object at 0x7f2a8d0bdc90>.response","statusTrace":"fixturefunc = <function validVaccinationRecordIsCreated at 0x7f2a8e0a3240>\nrequest = <FixtureRequest for <Function test_scenario_outline_name_verify_that_the_update_api_will_be_fails_if_expiration_date_has_invalid_formatted_date[empty]>>\nkwargs = {'context': <utilities.context.ScenarioContext object at 0x7f2a8d0bdc90>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfeatures/APITests/steps/common_steps.py:45: in validVaccinationRecordIsCreated\n    The_request_will_have_status_code(context, 201)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <utilities.context.ScenarioContext object at 0x7f2a8d0bdc90>\nstatusCode = 201\n\n    @then(parsers.parse(\"The request will be unsuccessful with the status code '{statusCode}'\"))\n    @then(parsers.parse(\"The request will be successful with the status code '{statusCode}'\"))\n    def The_request_will_have_status_code(context, statusCode):\n        print(context.response.status_code)\n        print(int(statusCode))\n>       assert context.response.status_code == int(statusCode), f\"\\n Expected status code: {statusCode}, but got: {context.response.status_code}. Response: {context.response.json()} \\n\"\nE       AssertionError: \nE        Expected status code: 201, but got: 502. Response: {'fault': {'faultstring': 'Unexpected EOF at target', 'detail': {'errorcode': 'messaging.adaptors.http.flow.UnexpectedEOFAtTarget'}}}\n\nfeatures/APITests/steps/common_steps.py:66: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <HookCaller 'pytest_bdd_after_scenario'>\nkwargs = {'feature': Feature(scenarios=OrderedDict([('Verify that the Update API will be successful with all the valid paramete...tion='', tags={'vaccine_type_RSV', 'patient_id_Mod11_NHS', 'supplier_name_Postman_Auth', 'Delete_cleanUp'}, rule=None)}\nfirstresult = False\n\n    def __call__(self, **kwargs: object) -> Any:\n        \"\"\"Call the hook.\n    \n        Only accepts keyword arguments, which should match the hook\n        specification.\n    \n        Returns the result(s) of calling all registered plugins, see\n        :ref:`calling`.\n        \"\"\"\n        assert (\n            not self.is_historic()\n        ), \"Cannot directly call a historic hook - use call_historic instead.\"\n        self._verify_all_args_are_provided(kwargs)\n        firstresult = self.spec.opts.get(\"firstresult\", False) if self.spec else False\n        # Copy because plugins may register other plugins during iteration (#438).\n>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\nvenv/lib/python3.11/site-packages/pluggy/_hooks.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <FixtureRequest for <Function test_scenario_outline_name_verify_that_the_update_api_will_be_fails_if_expiration_date_has_invalid_formatted_date[empty]>>\nfeature = Feature(scenarios=OrderedDict([('Verify that the Update API will be successful with all the valid parameters', Scenari..., name='Update the immunization of a patient', tags={'Update_Feature'}, background=None, line_number=2, description='')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Verify that the Update API will be successful with all the valid par...ption='', tags={'vaccine_type_RSV', 'patient_id_Mod11_NHS', 'supplier_name_Postman_Auth', 'Delete_cleanUp'}, rule=None)\n\n    def pytest_bdd_after_scenario(request, feature, scenario):\n        tags = set(getattr(scenario, 'tags', [])) | set(getattr(feature, 'tags', []))\n        context = request.getfixturevalue('context')\n        get_delete_url_header(context)\n    \n        if 'Delete_cleanUp' in tags:\n            print(f\"\\n Delete Request is {context.url}/{context.ImmsID}\")\n            context.response = requests.delete(f\"{context.url}/{context.ImmsID}\", headers=context.headers)\n>           assert context.response.status_code == 204, f\"Expected status code 204, but got {context.response.status_code}. Response: {context.response.json()}\"\nE           AssertionError: Expected status code 204, but got 404. Response: {'resourceType': 'OperationOutcome', 'id': '4babcea3-0db7-495c-8fdf-95776b3355e9', 'meta': {'profile': ['https://simplifier.net/guide/UKCoreDevelopment2/ProfileUKCore-OperationOutcome']}, 'issue': [{'severity': 'error', 'code': 'not-found', 'details': {'coding': [{'system': 'https://fhir.nhs.uk/Codesystem/http-error-codes', 'code': 'NOT-FOUND'}]}, 'diagnostics': 'Immunization resource does not exist. ID: None'}]}\nE           assert 404 == 204\nE            +  where 404 = <Response [404]>.status_code\nE            +    where <Response [404]> = <utilities.context.ScenarioContext object at 0x7f2a8d0bdc90>.response\n\nfeatures/conftest.py:86: AssertionError","steps":[],"attachments":[{"uid":"a4b755c9c04d0b22","name":"Step Failed: I have created a valid vaccination record","source":"a4b755c9c04d0b22.txt","type":"text/plain","size":260},{"uid":"d6de283df724383b","name":"stdout","source":"d6de283df724383b.txt","type":"text/plain","size":4076}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Immunization Service"},{"name":"suite","value":"Update the immunization of a patient"},{"name":"feature","value":"Update the immunization of a patient"},{"name":"tag","value":"supplier_name_Postman_Auth"},{"name":"tag","value":"vaccine_type_RSV"},{"name":"tag","value":"patient_id_Mod11_NHS"},{"name":"tag","value":"Delete_cleanUp"},{"name":"tag","value":"Update_Feature"},{"name":"parentSuite","value":"features.APITests.steps"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2473-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"features.APITests.steps.test_update_steps"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"_pytest_bdd_example","value":"{'Date': 'empty'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"1f6e2d4a8a8af376","reportUrl":"https://NHSDigital.github.io/imms_fhir_api_automation/90//#testresult/1f6e2d4a8a8af376","status":"passed","time":{"start":1760011530578,"stop":1760011533248,"duration":2670}},{"uid":"6df5a5fc6d1e330","reportUrl":"https://NHSDigital.github.io/imms_fhir_api_automation/89//#testresult/6df5a5fc6d1e330","status":"passed","time":{"start":1760009796842,"stop":1760009800990,"duration":4148}}]},"tags":["Update_Feature","supplier_name_Postman_Auth","vaccine_type_RSV","patient_id_Mod11_NHS","Delete_cleanUp"]},"source":"d48302e0b4dcb553.json","parameterValues":["{'Date': 'empty'}"]}