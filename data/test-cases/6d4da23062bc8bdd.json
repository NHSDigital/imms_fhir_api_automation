{"uid":"6d4da23062bc8bdd","name":"Verify that update will be successful when request is triggered by other supplier with authorize permission","fullName":"features.APITests.steps.test_update_steps#test_verify_that_update_will_be_successful_when_request_is_triggered_by_other_supplier_with_authorize_permission","historyId":"76ac16378afb4b3fb5d58cae772750e0","time":{"start":1759923897841,"stop":1759923899491,"duration":1650},"description":"/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/update.feature: Verify that update will be successful when request is triggered by other supplier with authorize permission","descriptionHtml":"<p>/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/update.feature: Verify that update will be successful when request is triggered by other supplier with authorize permission</p>\n","status":"failed","statusMessage":"AssertionError: \n Expected status code: 201, but got: 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'quota', 'message_id': 'rrt-4101915691699960631-b-geu2-4159506-44105978-1'}","statusTrace":"fixturefunc = <function valid_vaccination_record_is_created_by_supplier at 0x7f5ef007b560>\nrequest = <FixtureRequest for <Function test_verify_that_update_will_be_successful_when_request_is_triggered_by_other_supplier_with_authorize_permission>>\nkwargs = {'Supplier': 'Postman_Auth', 'context': <utilities.context.ScenarioContext object at 0x7f5eef55f4d0>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfeatures/APITests/steps/common_steps.py:51: in valid_vaccination_record_is_created_by_supplier\n    validVaccinationRecordIsCreated(context)\nfeatures/APITests/steps/common_steps.py:45: in validVaccinationRecordIsCreated\n    The_request_will_have_status_code(context, 201)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <utilities.context.ScenarioContext object at 0x7f5eef55f4d0>\nstatusCode = 201\n\n    @then(parsers.parse(\"The request will be unsuccessful with the status code '{statusCode}'\"))\n    @then(parsers.parse(\"The request will be successful with the status code '{statusCode}'\"))\n    def The_request_will_have_status_code(context, statusCode):\n        print(context.response.status_code)\n        print(int(statusCode))\n>       assert context.response.status_code == int(statusCode), f\"\\n Expected status code: {statusCode}, but got: {context.response.status_code}. Response: {context.response.json()} \\n\"\nE       AssertionError: \nE        Expected status code: 201, but got: 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'quota', 'message_id': 'rrt-4101915691699960631-b-geu2-4159506-44105978-1'}\n\nfeatures/APITests/steps/common_steps.py:66: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_environment","time":{"start":1759923531411,"stop":1759923531411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"global_context","time":{"start":1759923531413,"stop":1759923532948,"duration":1535},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"context","time":{"start":1759923897841,"stop":1759923897842,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_pytest_bdd_example","time":{"start":1759923897841,"stop":1759923897841,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/update.feature: Verify that update will be successful when request is triggered by other supplier with authorize permission","status":"failed","statusMessage":"AssertionError: \n Expected status code: 201, but got: 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'quota', 'message_id': 'rrt-4101915691699960631-b-geu2-4159506-44105978-1'}","statusTrace":"fixturefunc = <function valid_vaccination_record_is_created_by_supplier at 0x7f5ef007b560>\nrequest = <FixtureRequest for <Function test_verify_that_update_will_be_successful_when_request_is_triggered_by_other_supplier_with_authorize_permission>>\nkwargs = {'Supplier': 'Postman_Auth', 'context': <utilities.context.ScenarioContext object at 0x7f5eef55f4d0>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfeatures/APITests/steps/common_steps.py:51: in valid_vaccination_record_is_created_by_supplier\n    validVaccinationRecordIsCreated(context)\nfeatures/APITests/steps/common_steps.py:45: in validVaccinationRecordIsCreated\n    The_request_will_have_status_code(context, 201)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <utilities.context.ScenarioContext object at 0x7f5eef55f4d0>\nstatusCode = 201\n\n    @then(parsers.parse(\"The request will be unsuccessful with the status code '{statusCode}'\"))\n    @then(parsers.parse(\"The request will be successful with the status code '{statusCode}'\"))\n    def The_request_will_have_status_code(context, statusCode):\n        print(context.response.status_code)\n        print(int(statusCode))\n>       assert context.response.status_code == int(statusCode), f\"\\n Expected status code: {statusCode}, but got: {context.response.status_code}. Response: {context.response.json()} \\n\"\nE       AssertionError: \nE        Expected status code: 201, but got: 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'quota', 'message_id': 'rrt-4101915691699960631-b-geu2-4159506-44105978-1'}\n\nfeatures/APITests/steps/common_steps.py:66: AssertionError","steps":[],"attachments":[{"uid":"26cf005d604b4f07","name":"Step Failed: valid vaccination record is created by 'Postman_Auth' supplier","source":"26cf005d604b4f07.txt","type":"text/plain","size":351},{"uid":"4f790c42606f959f","name":"stdout","source":"4f790c42606f959f.txt","type":"text/plain","size":4022}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Immunization Service"},{"name":"suite","value":"Update the immunization of a patient"},{"name":"feature","value":"Update the immunization of a patient"},{"name":"tag","value":"vaccine_type_FLU"},{"name":"tag","value":"Update_Feature"},{"name":"tag","value":"patient_id_Random"},{"name":"parentSuite","value":"features.APITests.steps"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2457-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"features.APITests.steps.test_update_steps"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["vaccine_type_FLU","Update_Feature","patient_id_Random"]},"source":"6d4da23062bc8bdd.json","parameterValues":[]}