{"uid":"a56e9e2bd0fae2cd","name":"Verify that the Read method of API will be successful and fetch valid imms event detail","fullName":"features.APITests.steps.test_read_steps#test_verify_that_the_read_method_of_api_will_be_successful_and_fetch_valid_imms_event_detail","historyId":"fa148aab253e66995daf10cad81d0bd0","time":{"start":1760015544176,"stop":1760015553178,"duration":9002},"description":"/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/read.feature: Verify that the Read method of API will be successful and fetch valid imms event detail","descriptionHtml":"<p>/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/read.feature: Verify that the Read method of API will be successful and fetch valid imms event detail</p>\n","status":"failed","statusMessage":"AssertionError: Expected status code 204, but got 404. Response: {'resourceType': 'OperationOutcome', 'id': '60ada8e1-317d-4e1e-b663-7b4d8d375fac', 'meta': {'profile': ['https://simplifier.net/guide/UKCoreDevelopment2/ProfileUKCore-OperationOutcome']}, 'issue': [{'severity': 'error', 'code': 'not-found', 'details': {'coding': [{'system': 'https://fhir.nhs.uk/Codesystem/http-error-codes', 'code': 'NOT-FOUND'}]}, 'diagnostics': 'Immunization resource does not exist. ID: None'}]}\nassert 404 == 204\n +  where 404 = <Response [404]>.status_code\n +    where <Response [404]> = <utilities.context.ScenarioContext object at 0x7ffb1dd97350>.response","statusTrace":"fixturefunc = <function validVaccinationRecordIsCreatedWithPatient at 0x7ffb1df03100>\nrequest = <FixtureRequest for <Function test_verify_that_the_read_method_of_api_will_be_successful_and_fetch_valid_imms_event_detail[Random-COVID19]>>\nkwargs = {'Patient': 'Random', 'context': <utilities.context.ScenarioContext object at 0x7ffb1dd97350>, 'vaccine_type': 'COVID19'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfeatures/APITests/steps/common_steps.py:38: in validVaccinationRecordIsCreatedWithPatient\n    The_request_will_have_status_code(context, 201)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <utilities.context.ScenarioContext object at 0x7ffb1dd97350>\nstatusCode = 201\n\n    @then(parsers.parse(\"The request will be unsuccessful with the status code '{statusCode}'\"))\n    @then(parsers.parse(\"The request will be successful with the status code '{statusCode}'\"))\n    def The_request_will_have_status_code(context, statusCode):\n        print(context.response.status_code)\n        print(int(statusCode))\n>       assert context.response.status_code == int(statusCode), f\"\\n Expected status code: {statusCode}, but got: {context.response.status_code}. Response: {context.response.json()} \\n\"\nE       AssertionError: \nE        Expected status code: 201, but got: 502. Response: {'fault': {'faultstring': 'Unexpected EOF at target', 'detail': {'errorcode': 'messaging.adaptors.http.flow.UnexpectedEOFAtTarget'}}}\n\nfeatures/APITests/steps/common_steps.py:66: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <HookCaller 'pytest_bdd_after_scenario'>\nkwargs = {'feature': Feature(scenarios=OrderedDict([('Verify that the Read method of API will be successful and fetch valid imm...e, scenario=None, background=None)], description='', tags={'Delete_cleanUp', 'supplier_name_Postman_Auth'}, rule=None)}\nfirstresult = False\n\n    def __call__(self, **kwargs: object) -> Any:\n        \"\"\"Call the hook.\n    \n        Only accepts keyword arguments, which should match the hook\n        specification.\n    \n        Returns the result(s) of calling all registered plugins, see\n        :ref:`calling`.\n        \"\"\"\n        assert (\n            not self.is_historic()\n        ), \"Cannot directly call a historic hook - use call_historic instead.\"\n        self._verify_all_args_are_provided(kwargs)\n        firstresult = self.spec.opts.get(\"firstresult\", False) if self.spec else False\n        # Copy because plugins may register other plugins during iteration (#438).\n>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\nvenv/lib/python3.11/site-packages/pluggy/_hooks.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <FixtureRequest for <Function test_verify_that_the_read_method_of_api_will_be_successful_and_fetch_valid_imms_event_detail[Random-COVID19]>>\nfeature = Feature(scenarios=OrderedDict([('Verify that the Read method of API will be successful and fetch valid imms event deta...ure', name='Read the immunization of a patient', tags={'Read_Feature'}, background=None, line_number=2, description='')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Verify that the Read method of API will be successful and fetch vali...se, scenario=None, background=None)], description='', tags={'Delete_cleanUp', 'supplier_name_Postman_Auth'}, rule=None)\n\n    def pytest_bdd_after_scenario(request, feature, scenario):\n        tags = set(getattr(scenario, 'tags', [])) | set(getattr(feature, 'tags', []))\n        context = request.getfixturevalue('context')\n        get_delete_url_header(context)\n    \n        if 'Delete_cleanUp' in tags:\n            print(f\"\\n Delete Request is {context.url}/{context.ImmsID}\")\n            context.response = requests.delete(f\"{context.url}/{context.ImmsID}\", headers=context.headers)\n>           assert context.response.status_code == 204, f\"Expected status code 204, but got {context.response.status_code}. Response: {context.response.json()}\"\nE           AssertionError: Expected status code 204, but got 404. Response: {'resourceType': 'OperationOutcome', 'id': '60ada8e1-317d-4e1e-b663-7b4d8d375fac', 'meta': {'profile': ['https://simplifier.net/guide/UKCoreDevelopment2/ProfileUKCore-OperationOutcome']}, 'issue': [{'severity': 'error', 'code': 'not-found', 'details': {'coding': [{'system': 'https://fhir.nhs.uk/Codesystem/http-error-codes', 'code': 'NOT-FOUND'}]}, 'diagnostics': 'Immunization resource does not exist. ID: None'}]}\nE           assert 404 == 204\nE            +  where 404 = <Response [404]>.status_code\nE            +    where <Response [404]> = <utilities.context.ScenarioContext object at 0x7ffb1dd97350>.response\n\nfeatures/conftest.py:88: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_environment","time":{"start":1760015327308,"stop":1760015327308,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"global_context","time":{"start":1760015327311,"stop":1760015328910,"duration":1599},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"context","time":{"start":1760015544177,"stop":1760015545409,"duration":1232},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_pytest_bdd_example","time":{"start":1760015553318,"stop":1760015553318,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/read.feature: Verify that the Read method of API will be successful and fetch valid imms event detail","status":"failed","statusMessage":"AssertionError: Expected status code 204, but got 404. Response: {'resourceType': 'OperationOutcome', 'id': '60ada8e1-317d-4e1e-b663-7b4d8d375fac', 'meta': {'profile': ['https://simplifier.net/guide/UKCoreDevelopment2/ProfileUKCore-OperationOutcome']}, 'issue': [{'severity': 'error', 'code': 'not-found', 'details': {'coding': [{'system': 'https://fhir.nhs.uk/Codesystem/http-error-codes', 'code': 'NOT-FOUND'}]}, 'diagnostics': 'Immunization resource does not exist. ID: None'}]}\nassert 404 == 204\n +  where 404 = <Response [404]>.status_code\n +    where <Response [404]> = <utilities.context.ScenarioContext object at 0x7ffb1dd97350>.response","statusTrace":"fixturefunc = <function validVaccinationRecordIsCreatedWithPatient at 0x7ffb1df03100>\nrequest = <FixtureRequest for <Function test_verify_that_the_read_method_of_api_will_be_successful_and_fetch_valid_imms_event_detail[Random-COVID19]>>\nkwargs = {'Patient': 'Random', 'context': <utilities.context.ScenarioContext object at 0x7ffb1dd97350>, 'vaccine_type': 'COVID19'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfeatures/APITests/steps/common_steps.py:38: in validVaccinationRecordIsCreatedWithPatient\n    The_request_will_have_status_code(context, 201)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <utilities.context.ScenarioContext object at 0x7ffb1dd97350>\nstatusCode = 201\n\n    @then(parsers.parse(\"The request will be unsuccessful with the status code '{statusCode}'\"))\n    @then(parsers.parse(\"The request will be successful with the status code '{statusCode}'\"))\n    def The_request_will_have_status_code(context, statusCode):\n        print(context.response.status_code)\n        print(int(statusCode))\n>       assert context.response.status_code == int(statusCode), f\"\\n Expected status code: {statusCode}, but got: {context.response.status_code}. Response: {context.response.json()} \\n\"\nE       AssertionError: \nE        Expected status code: 201, but got: 502. Response: {'fault': {'faultstring': 'Unexpected EOF at target', 'detail': {'errorcode': 'messaging.adaptors.http.flow.UnexpectedEOFAtTarget'}}}\n\nfeatures/APITests/steps/common_steps.py:66: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <HookCaller 'pytest_bdd_after_scenario'>\nkwargs = {'feature': Feature(scenarios=OrderedDict([('Verify that the Read method of API will be successful and fetch valid imm...e, scenario=None, background=None)], description='', tags={'Delete_cleanUp', 'supplier_name_Postman_Auth'}, rule=None)}\nfirstresult = False\n\n    def __call__(self, **kwargs: object) -> Any:\n        \"\"\"Call the hook.\n    \n        Only accepts keyword arguments, which should match the hook\n        specification.\n    \n        Returns the result(s) of calling all registered plugins, see\n        :ref:`calling`.\n        \"\"\"\n        assert (\n            not self.is_historic()\n        ), \"Cannot directly call a historic hook - use call_historic instead.\"\n        self._verify_all_args_are_provided(kwargs)\n        firstresult = self.spec.opts.get(\"firstresult\", False) if self.spec else False\n        # Copy because plugins may register other plugins during iteration (#438).\n>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\nvenv/lib/python3.11/site-packages/pluggy/_hooks.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <FixtureRequest for <Function test_verify_that_the_read_method_of_api_will_be_successful_and_fetch_valid_imms_event_detail[Random-COVID19]>>\nfeature = Feature(scenarios=OrderedDict([('Verify that the Read method of API will be successful and fetch valid imms event deta...ure', name='Read the immunization of a patient', tags={'Read_Feature'}, background=None, line_number=2, description='')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Verify that the Read method of API will be successful and fetch vali...se, scenario=None, background=None)], description='', tags={'Delete_cleanUp', 'supplier_name_Postman_Auth'}, rule=None)\n\n    def pytest_bdd_after_scenario(request, feature, scenario):\n        tags = set(getattr(scenario, 'tags', [])) | set(getattr(feature, 'tags', []))\n        context = request.getfixturevalue('context')\n        get_delete_url_header(context)\n    \n        if 'Delete_cleanUp' in tags:\n            print(f\"\\n Delete Request is {context.url}/{context.ImmsID}\")\n            context.response = requests.delete(f\"{context.url}/{context.ImmsID}\", headers=context.headers)\n>           assert context.response.status_code == 204, f\"Expected status code 204, but got {context.response.status_code}. Response: {context.response.json()}\"\nE           AssertionError: Expected status code 204, but got 404. Response: {'resourceType': 'OperationOutcome', 'id': '60ada8e1-317d-4e1e-b663-7b4d8d375fac', 'meta': {'profile': ['https://simplifier.net/guide/UKCoreDevelopment2/ProfileUKCore-OperationOutcome']}, 'issue': [{'severity': 'error', 'code': 'not-found', 'details': {'coding': [{'system': 'https://fhir.nhs.uk/Codesystem/http-error-codes', 'code': 'NOT-FOUND'}]}, 'diagnostics': 'Immunization resource does not exist. ID: None'}]}\nE           assert 404 == 204\nE            +  where 404 = <Response [404]>.status_code\nE            +    where <Response [404]> = <utilities.context.ScenarioContext object at 0x7ffb1dd97350>.response\n\nfeatures/conftest.py:88: AssertionError","steps":[],"attachments":[{"uid":"46b33014d0b9edd3","name":"Step Failed: Valid vaccination record is created with Patient 'Random' and vaccine_type 'COVID19'","source":"46b33014d0b9edd3.txt","type":"text/plain","size":303},{"uid":"f27b38107c439363","name":"stdout","source":"f27b38107c439363.txt","type":"text/plain","size":4253}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Immunization Service"},{"name":"suite","value":"Read the immunization of a patient"},{"name":"feature","value":"Read the immunization of a patient"},{"name":"tag","value":"Read_Feature"},{"name":"tag","value":"Delete_cleanUp"},{"name":"tag","value":"supplier_name_Postman_Auth"},{"name":"parentSuite","value":"features.APITests.steps"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2453-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"features.APITests.steps.test_read_steps"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"_pytest_bdd_example","value":"{'Patient': 'Random', 'Vaccine_type': 'COVID19'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["Read_Feature","supplier_name_Postman_Auth","Delete_cleanUp"]},"source":"a56e9e2bd0fae2cd.json","parameterValues":["{'Patient': 'Random', 'Vaccine_type': 'COVID19'}"]}