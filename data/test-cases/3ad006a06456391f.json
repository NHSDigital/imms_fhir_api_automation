{"uid":"3ad006a06456391f","name":"Flu event is created and updated twice","fullName":"features.APITests.steps.test_update_steps#test_flu_event_is_created_and_updated_twice","historyId":"9b226546afc5591000d3682592696bdd","time":{"start":1759923887902,"stop":1759923897761,"duration":9859},"description":"/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/update.feature: Flu event is created and updated twice","descriptionHtml":"<p>/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/update.feature: Flu event is created and updated twice</p>\n","status":"failed","statusMessage":"AssertionError: Expected status code 204, but got 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'quota', 'message_id': 'rrt-97901149757229812-a-geu2-3940280-45294533-1'}\nassert 429 == 204\n +  where 429 = <Response [429]>.status_code\n +    where <Response [429]> = <utilities.context.ScenarioContext object at 0x7f5eef3e2150>.response","statusTrace":"fixturefunc = <function The_request_will_have_status_code at 0x7f5ef007b9c0>\nrequest = <FixtureRequest for <Function test_flu_event_is_created_and_updated_twice>>\nkwargs = {'context': <utilities.context.ScenarioContext object at 0x7f5eef3e2150>, 'statusCode': '200'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <utilities.context.ScenarioContext object at 0x7f5eef3e2150>\nstatusCode = '200'\n\n    @then(parsers.parse(\"The request will be unsuccessful with the status code '{statusCode}'\"))\n    @then(parsers.parse(\"The request will be successful with the status code '{statusCode}'\"))\n    def The_request_will_have_status_code(context, statusCode):\n        print(context.response.status_code)\n        print(int(statusCode))\n>       assert context.response.status_code == int(statusCode), f\"\\n Expected status code: {statusCode}, but got: {context.response.status_code}. Response: {context.response.json()} \\n\"\nE       AssertionError: \nE        Expected status code: 200, but got: 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'quota', 'message_id': 'rrt-2704453025730245268-c-geu2-2590246-44542609-1'}\n\nfeatures/APITests/steps/common_steps.py:66: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <HookCaller 'pytest_bdd_after_scenario'>\nkwargs = {'feature': Feature(scenarios=OrderedDict([('Verify that the Update API will be successful with all the valid paramete...ription='', tags={'vaccine_type_FLU', 'supplier_name_Postman_Auth', 'patient_id_Random', 'Delete_cleanUp'}, rule=None)}\nfirstresult = False\n\n    def __call__(self, **kwargs: object) -> Any:\n        \"\"\"Call the hook.\n    \n        Only accepts keyword arguments, which should match the hook\n        specification.\n    \n        Returns the result(s) of calling all registered plugins, see\n        :ref:`calling`.\n        \"\"\"\n        assert (\n            not self.is_historic()\n        ), \"Cannot directly call a historic hook - use call_historic instead.\"\n        self._verify_all_args_are_provided(kwargs)\n        firstresult = self.spec.opts.get(\"firstresult\", False) if self.spec else False\n        # Copy because plugins may register other plugins during iteration (#438).\n>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\nvenv/lib/python3.11/site-packages/pluggy/_hooks.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <FixtureRequest for <Function test_flu_event_is_created_and_updated_twice>>\nfeature = Feature(scenarios=OrderedDict([('Verify that the Update API will be successful with all the valid parameters', Scenari..., name='Update the immunization of a patient', tags={'Update_Feature'}, background=None, line_number=2, description='')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Verify that the Update API will be successful with all the valid par...cription='', tags={'vaccine_type_FLU', 'supplier_name_Postman_Auth', 'patient_id_Random', 'Delete_cleanUp'}, rule=None)\n\n    def pytest_bdd_after_scenario(request, feature, scenario):\n        tags = set(getattr(scenario, 'tags', [])) | set(getattr(feature, 'tags', []))\n        context = request.getfixturevalue('context')\n        get_delete_url_header(context)\n    \n        if 'Delete_cleanUp' in tags:\n            print(f\"\\n Delete Request is {context.url}/{context.ImmsID}\")\n            context.response = requests.delete(f\"{context.url}/{context.ImmsID}\", headers=context.headers)\n>           assert context.response.status_code == 204, f\"Expected status code 204, but got {context.response.status_code}. Response: {context.response.json()}\"\nE           AssertionError: Expected status code 204, but got 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'quota', 'message_id': 'rrt-97901149757229812-a-geu2-3940280-45294533-1'}\nE           assert 429 == 204\nE            +  where 429 = <Response [429]>.status_code\nE            +    where <Response [429]> = <utilities.context.ScenarioContext object at 0x7f5eef3e2150>.response\n\nfeatures/conftest.py:88: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_environment","time":{"start":1759923531411,"stop":1759923531411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"global_context","time":{"start":1759923531413,"stop":1759923532948,"duration":1535},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_pytest_bdd_example","time":{"start":1759923887901,"stop":1759923887901,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"context","time":{"start":1759923887902,"stop":1759923889132,"duration":1230},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/update.feature: Flu event is created and updated twice","status":"failed","statusMessage":"AssertionError: Expected status code 204, but got 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'quota', 'message_id': 'rrt-97901149757229812-a-geu2-3940280-45294533-1'}\nassert 429 == 204\n +  where 429 = <Response [429]>.status_code\n +    where <Response [429]> = <utilities.context.ScenarioContext object at 0x7f5eef3e2150>.response","statusTrace":"fixturefunc = <function The_request_will_have_status_code at 0x7f5ef007b9c0>\nrequest = <FixtureRequest for <Function test_flu_event_is_created_and_updated_twice>>\nkwargs = {'context': <utilities.context.ScenarioContext object at 0x7f5eef3e2150>, 'statusCode': '200'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <utilities.context.ScenarioContext object at 0x7f5eef3e2150>\nstatusCode = '200'\n\n    @then(parsers.parse(\"The request will be unsuccessful with the status code '{statusCode}'\"))\n    @then(parsers.parse(\"The request will be successful with the status code '{statusCode}'\"))\n    def The_request_will_have_status_code(context, statusCode):\n        print(context.response.status_code)\n        print(int(statusCode))\n>       assert context.response.status_code == int(statusCode), f\"\\n Expected status code: {statusCode}, but got: {context.response.status_code}. Response: {context.response.json()} \\n\"\nE       AssertionError: \nE        Expected status code: 200, but got: 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'quota', 'message_id': 'rrt-2704453025730245268-c-geu2-2590246-44542609-1'}\n\nfeatures/APITests/steps/common_steps.py:66: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <HookCaller 'pytest_bdd_after_scenario'>\nkwargs = {'feature': Feature(scenarios=OrderedDict([('Verify that the Update API will be successful with all the valid paramete...ription='', tags={'vaccine_type_FLU', 'supplier_name_Postman_Auth', 'patient_id_Random', 'Delete_cleanUp'}, rule=None)}\nfirstresult = False\n\n    def __call__(self, **kwargs: object) -> Any:\n        \"\"\"Call the hook.\n    \n        Only accepts keyword arguments, which should match the hook\n        specification.\n    \n        Returns the result(s) of calling all registered plugins, see\n        :ref:`calling`.\n        \"\"\"\n        assert (\n            not self.is_historic()\n        ), \"Cannot directly call a historic hook - use call_historic instead.\"\n        self._verify_all_args_are_provided(kwargs)\n        firstresult = self.spec.opts.get(\"firstresult\", False) if self.spec else False\n        # Copy because plugins may register other plugins during iteration (#438).\n>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\nvenv/lib/python3.11/site-packages/pluggy/_hooks.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <FixtureRequest for <Function test_flu_event_is_created_and_updated_twice>>\nfeature = Feature(scenarios=OrderedDict([('Verify that the Update API will be successful with all the valid parameters', Scenari..., name='Update the immunization of a patient', tags={'Update_Feature'}, background=None, line_number=2, description='')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Verify that the Update API will be successful with all the valid par...cription='', tags={'vaccine_type_FLU', 'supplier_name_Postman_Auth', 'patient_id_Random', 'Delete_cleanUp'}, rule=None)\n\n    def pytest_bdd_after_scenario(request, feature, scenario):\n        tags = set(getattr(scenario, 'tags', [])) | set(getattr(feature, 'tags', []))\n        context = request.getfixturevalue('context')\n        get_delete_url_header(context)\n    \n        if 'Delete_cleanUp' in tags:\n            print(f\"\\n Delete Request is {context.url}/{context.ImmsID}\")\n            context.response = requests.delete(f\"{context.url}/{context.ImmsID}\", headers=context.headers)\n>           assert context.response.status_code == 204, f\"Expected status code 204, but got {context.response.status_code}. Response: {context.response.json()}\"\nE           AssertionError: Expected status code 204, but got 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'quota', 'message_id': 'rrt-97901149757229812-a-geu2-3940280-45294533-1'}\nE           assert 429 == 204\nE            +  where 429 = <Response [429]>.status_code\nE            +    where <Response [429]> = <utilities.context.ScenarioContext object at 0x7f5eef3e2150>.response\n\nfeatures/conftest.py:88: AssertionError","steps":[],"attachments":[{"uid":"91bdbfdd77c8ac1e","name":"Step Passed: I have created a valid vaccination record","source":"91bdbfdd77c8ac1e.txt","type":"text/plain","size":60},{"uid":"5ad81511181d4a79","name":"Step Passed: Send a update for Immunization event created with patient address being updated","source":"5ad81511181d4a79.txt","type":"text/plain","size":98},{"uid":"11eb984037f74494","name":"Step Passed: The request will be successful with the status code '200'","source":"11eb984037f74494.txt","type":"text/plain","size":76},{"uid":"e340b444691cf49c","name":"Step Passed: The Etag in header will containing the latest event version","source":"e340b444691cf49c.txt","type":"text/plain","size":78},{"uid":"75db18ca4470619c","name":"Step Passed: The imms event table will be populated with the correct data for 'updated' event","source":"75db18ca4470619c.txt","type":"text/plain","size":99},{"uid":"1a712287089cadf2","name":"Step Passed: The delta table will be populated with the correct data for updated event","source":"1a712287089cadf2.txt","type":"text/plain","size":92},{"uid":"12fabb9b6e200df6","name":"Step Passed: Send a update for Immunization event created with vaccination detail being updated","source":"12fabb9b6e200df6.txt","type":"text/plain","size":101},{"uid":"d055186bfa56965b","name":"Step Failed: The request will be successful with the status code '200'","source":"d055186bfa56965b.txt","type":"text/plain","size":346},{"uid":"9f4a9e1318526d46","name":"stdout","source":"9f4a9e1318526d46.txt","type":"text/plain","size":20991}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":9,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Immunization Service"},{"name":"suite","value":"Update the immunization of a patient"},{"name":"feature","value":"Update the immunization of a patient"},{"name":"tag","value":"Update_Feature"},{"name":"tag","value":"Delete_cleanUp"},{"name":"tag","value":"vaccine_type_FLU"},{"name":"tag","value":"supplier_name_Postman_Auth"},{"name":"tag","value":"patient_id_Random"},{"name":"parentSuite","value":"features.APITests.steps"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2457-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"features.APITests.steps.test_update_steps"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["vaccine_type_FLU","Update_Feature","patient_id_Random","supplier_name_Postman_Auth","Delete_cleanUp"]},"source":"3ad006a06456391f.json","parameterValues":[]}