{"uid":"8548632cd1f756f5","name":"Verify that Search API will throw error if date from is invalid","fullName":"features.APITests.steps.test_search_steps#test_verify_that_search_api_will_throw_error_if_date_from_is_invalid","historyId":"f36b98b758512d1ae25b6ec18d9d579e","time":{"start":1759923819408,"stop":1759923821671,"duration":2263},"description":"/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/search.feature: Verify that Search API will throw error if date from is invalid","descriptionHtml":"<p>/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/search.feature: Verify that Search API will throw error if date from is invalid</p>\n","status":"failed","statusMessage":"AssertionError: \n Expected status code: 400, but got: 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'spikeArrest', 'message_id': 'rrt-2704453025730245268-c-geu2-2590245-44540442-1'}","statusTrace":"fixturefunc = <function The_request_will_have_status_code at 0x7f5ef007b9c0>\nrequest = <FixtureRequest for <Function test_verify_that_search_api_will_throw_error_if_date_from_is_invalid[999-06-01-2025-06-01]>>\nkwargs = {'context': <utilities.context.ScenarioContext object at 0x7f5eefcbde10>, 'statusCode': '400'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <utilities.context.ScenarioContext object at 0x7f5eefcbde10>\nstatusCode = '400'\n\n    @then(parsers.parse(\"The request will be unsuccessful with the status code '{statusCode}'\"))\n    @then(parsers.parse(\"The request will be successful with the status code '{statusCode}'\"))\n    def The_request_will_have_status_code(context, statusCode):\n        print(context.response.status_code)\n        print(int(statusCode))\n>       assert context.response.status_code == int(statusCode), f\"\\n Expected status code: {statusCode}, but got: {context.response.status_code}. Response: {context.response.json()} \\n\"\nE       AssertionError: \nE        Expected status code: 400, but got: 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'spikeArrest', 'message_id': 'rrt-2704453025730245268-c-geu2-2590245-44540442-1'}\n\nfeatures/APITests/steps/common_steps.py:66: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_environment","time":{"start":1759923531411,"stop":1759923531411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"global_context","time":{"start":1759923531413,"stop":1759923532948,"duration":1535},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"context","time":{"start":1759923819408,"stop":1759923820798,"duration":1390},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_pytest_bdd_example","time":{"start":1759923839669,"stop":1759923839669,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/search.feature: Verify that Search API will throw error if date from is invalid","status":"failed","statusMessage":"AssertionError: \n Expected status code: 400, but got: 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'spikeArrest', 'message_id': 'rrt-2704453025730245268-c-geu2-2590245-44540442-1'}","statusTrace":"fixturefunc = <function The_request_will_have_status_code at 0x7f5ef007b9c0>\nrequest = <FixtureRequest for <Function test_verify_that_search_api_will_throw_error_if_date_from_is_invalid[999-06-01-2025-06-01]>>\nkwargs = {'context': <utilities.context.ScenarioContext object at 0x7f5eefcbde10>, 'statusCode': '400'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext = <utilities.context.ScenarioContext object at 0x7f5eefcbde10>\nstatusCode = '400'\n\n    @then(parsers.parse(\"The request will be unsuccessful with the status code '{statusCode}'\"))\n    @then(parsers.parse(\"The request will be successful with the status code '{statusCode}'\"))\n    def The_request_will_have_status_code(context, statusCode):\n        print(context.response.status_code)\n        print(int(statusCode))\n>       assert context.response.status_code == int(statusCode), f\"\\n Expected status code: {statusCode}, but got: {context.response.status_code}. Response: {context.response.json()} \\n\"\nE       AssertionError: \nE        Expected status code: 400, but got: 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'spikeArrest', 'message_id': 'rrt-2704453025730245268-c-geu2-2590245-44540442-1'}\n\nfeatures/APITests/steps/common_steps.py:66: AssertionError","steps":[],"attachments":[{"uid":"b93c1bbfa78694af","name":"Step Passed: Send a search request with GET method with invalid Date From '999-06-01' and valid Date To '2025-06-01'","source":"b93c1bbfa78694af.txt","type":"text/plain","size":122},{"uid":"6ca1187eeddb9331","name":"Step Passed: The request will be unsuccessful with the status code '400'","source":"6ca1187eeddb9331.txt","type":"text/plain","size":78},{"uid":"87c74ff4bdf6f2f0","name":"Step Passed: The Search Response JSONs should contain correct error message for invalid Date From","source":"87c74ff4bdf6f2f0.txt","type":"text/plain","size":103},{"uid":"28128e28f5331d07","name":"Step Passed: Send a search request with POST method with invalid Date From '999-06-01' and valid Date To '2025-06-01'","source":"28128e28f5331d07.txt","type":"text/plain","size":123},{"uid":"2ecc1a96aa29457e","name":"Step Failed: The request will be unsuccessful with the status code '400'","source":"2ecc1a96aa29457e.txt","type":"text/plain","size":354},{"uid":"46b976039e1fae50","name":"stdout","source":"46b976039e1fae50.txt","type":"text/plain","size":836}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":6,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Immunization Service"},{"name":"suite","value":"Search the immunization of a patient"},{"name":"feature","value":"Search the immunization of a patient"},{"name":"tag","value":"vaccine_type_RSV"},{"name":"tag","value":"Search_Feature"},{"name":"tag","value":"supplier_name_MAVIS"},{"name":"parentSuite","value":"features.APITests.steps"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2457-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"features.APITests.steps.test_search_steps"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"_pytest_bdd_example","value":"{'DateFrom': '999-06-01', 'DateTo': '2025-06-01'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["Search_Feature","supplier_name_MAVIS","vaccine_type_RSV"]},"source":"8548632cd1f756f5.json","parameterValues":["{'DateFrom': '999-06-01', 'DateTo': '2025-06-01'}"]}