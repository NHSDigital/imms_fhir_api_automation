{"uid":"1317def91b5d2f9","name":"Verify that VACCINATION PROCEDURE TERM, VACCINE PRODUCT TERM, SITE OF VACCINATION TERM, ROUTE OF VACCINATION TERM fields are mapped to respective text fields in imms delta table","fullName":"features.APITests.steps.test_create_steps#test_verify_that_vaccination_procedure_term_vaccine_product_term_site_of_vaccination_term_route_of_vaccination_term_fields_are_mapped_to_respective_text_fields_in_imms_delta_table","historyId":"641d171ee06dd13372f8a97c8a22d177","time":{"start":1759923591142,"stop":1759923599588,"duration":8446},"description":"/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/create.feature: Verify that VACCINATION_PROCEDURE_TERM, VACCINE_PRODUCT_TERM, SITE_OF_VACCINATION_TERM, ROUTE_OF_VACCINATION_TERM fields are mapped to respective text fields in imms delta table","descriptionHtml":"<p>/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/create.feature: Verify that VACCINATION_PROCEDURE_TERM, VACCINE_PRODUCT_TERM, SITE_OF_VACCINATION_TERM, ROUTE_OF_VACCINATION_TERM fields are mapped to respective text fields in imms delta table</p>\n","status":"failed","statusMessage":"AssertionError: Expected status code 204, but got 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'quota', 'message_id': 'rrt-2704453025730245268-c-geu2-2590245-44533932-1'}\nassert 429 == 204\n +  where 429 = <Response [429]>.status_code\n +    where <Response [429]> = <utilities.context.ScenarioContext object at 0x7f5ef00f8310>.response","statusTrace":"self = <HookCaller 'pytest_bdd_after_scenario'>\nkwargs = {'feature': Feature(scenarios=OrderedDict([('Verify that the POST Create API for different vaccine types', ScenarioTem...)], description='', tags={'vaccine_type_RSV', 'patient_id_Random', 'supplier_name_RAVS', 'Delete_cleanUp'}, rule=None)}\nfirstresult = False\n\n    def __call__(self, **kwargs: object) -> Any:\n        \"\"\"Call the hook.\n    \n        Only accepts keyword arguments, which should match the hook\n        specification.\n    \n        Returns the result(s) of calling all registered plugins, see\n        :ref:`calling`.\n        \"\"\"\n        assert (\n            not self.is_historic()\n        ), \"Cannot directly call a historic hook - use call_historic instead.\"\n        self._verify_all_args_are_provided(kwargs)\n        firstresult = self.spec.opts.get(\"firstresult\", False) if self.spec else False\n        # Copy because plugins may register other plugins during iteration (#438).\n>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\nvenv/lib/python3.11/site-packages/pluggy/_hooks.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <FixtureRequest for <Function test_verify_that_vaccination_procedure_term_vaccine_product_term_site_of_vaccination_term_route_of_vaccination_term_fields_are_mapped_to_respective_text_fields_in_imms_delta_table>>\nfeature = Feature(scenarios=OrderedDict([('Verify that the POST Create API for different vaccine types', ScenarioTemplate(featur...'Create the immunization event for a patient', tags={'Create_Feature'}, background=None, line_number=2, description='')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Verify that the POST Create API for different vaccine types', Scenar...e)], description='', tags={'vaccine_type_RSV', 'patient_id_Random', 'supplier_name_RAVS', 'Delete_cleanUp'}, rule=None)\n\n    def pytest_bdd_after_scenario(request, feature, scenario):\n        tags = set(getattr(scenario, 'tags', [])) | set(getattr(feature, 'tags', []))\n        context = request.getfixturevalue('context')\n        get_delete_url_header(context)\n    \n        if 'Delete_cleanUp' in tags:\n            print(f\"\\n Delete Request is {context.url}/{context.ImmsID}\")\n            context.response = requests.delete(f\"{context.url}/{context.ImmsID}\", headers=context.headers)\n>           assert context.response.status_code == 204, f\"Expected status code 204, but got {context.response.status_code}. Response: {context.response.json()}\"\nE           AssertionError: Expected status code 204, but got 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'quota', 'message_id': 'rrt-2704453025730245268-c-geu2-2590245-44533932-1'}\nE           assert 429 == 204\nE            +  where 429 = <Response [429]>.status_code\nE            +    where <Response [429]> = <utilities.context.ScenarioContext object at 0x7f5ef00f8310>.response\n\nfeatures/conftest.py:88: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_environment","time":{"start":1759923531411,"stop":1759923531411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"global_context","time":{"start":1759923531413,"stop":1759923532948,"duration":1535},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_pytest_bdd_example","time":{"start":1759923591142,"stop":1759923591142,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"context","time":{"start":1759923591143,"stop":1759923592601,"duration":1458},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"/home/runner/work/imms_fhir_api_automation/imms_fhir_api_automation/features/APITests/create.feature: Verify that VACCINATION_PROCEDURE_TERM, VACCINE_PRODUCT_TERM, SITE_OF_VACCINATION_TERM, ROUTE_OF_VACCINATION_TERM fields are mapped to respective text fields in imms delta table","status":"failed","statusMessage":"AssertionError: Expected status code 204, but got 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'quota', 'message_id': 'rrt-2704453025730245268-c-geu2-2590245-44533932-1'}\nassert 429 == 204\n +  where 429 = <Response [429]>.status_code\n +    where <Response [429]> = <utilities.context.ScenarioContext object at 0x7f5ef00f8310>.response","statusTrace":"self = <HookCaller 'pytest_bdd_after_scenario'>\nkwargs = {'feature': Feature(scenarios=OrderedDict([('Verify that the POST Create API for different vaccine types', ScenarioTem...)], description='', tags={'vaccine_type_RSV', 'patient_id_Random', 'supplier_name_RAVS', 'Delete_cleanUp'}, rule=None)}\nfirstresult = False\n\n    def __call__(self, **kwargs: object) -> Any:\n        \"\"\"Call the hook.\n    \n        Only accepts keyword arguments, which should match the hook\n        specification.\n    \n        Returns the result(s) of calling all registered plugins, see\n        :ref:`calling`.\n        \"\"\"\n        assert (\n            not self.is_historic()\n        ), \"Cannot directly call a historic hook - use call_historic instead.\"\n        self._verify_all_args_are_provided(kwargs)\n        firstresult = self.spec.opts.get(\"firstresult\", False) if self.spec else False\n        # Copy because plugins may register other plugins during iteration (#438).\n>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\nvenv/lib/python3.11/site-packages/pluggy/_hooks.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <FixtureRequest for <Function test_verify_that_vaccination_procedure_term_vaccine_product_term_site_of_vaccination_term_route_of_vaccination_term_fields_are_mapped_to_respective_text_fields_in_imms_delta_table>>\nfeature = Feature(scenarios=OrderedDict([('Verify that the POST Create API for different vaccine types', ScenarioTemplate(featur...'Create the immunization event for a patient', tags={'Create_Feature'}, background=None, line_number=2, description='')\nscenario = Scenario(feature=Feature(scenarios=OrderedDict([('Verify that the POST Create API for different vaccine types', Scenar...e)], description='', tags={'vaccine_type_RSV', 'patient_id_Random', 'supplier_name_RAVS', 'Delete_cleanUp'}, rule=None)\n\n    def pytest_bdd_after_scenario(request, feature, scenario):\n        tags = set(getattr(scenario, 'tags', [])) | set(getattr(feature, 'tags', []))\n        context = request.getfixturevalue('context')\n        get_delete_url_header(context)\n    \n        if 'Delete_cleanUp' in tags:\n            print(f\"\\n Delete Request is {context.url}/{context.ImmsID}\")\n            context.response = requests.delete(f\"{context.url}/{context.ImmsID}\", headers=context.headers)\n>           assert context.response.status_code == 204, f\"Expected status code 204, but got {context.response.status_code}. Response: {context.response.json()}\"\nE           AssertionError: Expected status code 204, but got 429. Response: {'message': 'This API is currently receiving a high volume of requests and is being rate limited.', 'scope': 'proxy', 'policy': 'quota', 'message_id': 'rrt-2704453025730245268-c-geu2-2590245-44533932-1'}\nE           assert 429 == 204\nE            +  where 429 = <Response [429]>.status_code\nE            +    where <Response [429]> = <utilities.context.ScenarioContext object at 0x7f5ef00f8310>.response\n\nfeatures/conftest.py:88: AssertionError","steps":[],"attachments":[{"uid":"c16c547dd98a04de","name":"Step Passed: Valid json payload is created where vaccination terms has text field populated","source":"c16c547dd98a04de.txt","type":"text/plain","size":97},{"uid":"d23c07755f012305","name":"Step Passed: Trigger the post create request","source":"d23c07755f012305.txt","type":"text/plain","size":50},{"uid":"6aed947c36b932a","name":"Step Passed: The request will be successful with the status code '201'","source":"6aed947c36b932a.txt","type":"text/plain","size":76},{"uid":"8e42b710bb175b38","name":"Step Passed: The location key and Etag in header will contain the Immunization Id and version","source":"8e42b710bb175b38.txt","type":"text/plain","size":99},{"uid":"23b1022f08c8d21","name":"Step Passed: The terms are mapped to the respective text fields in imms delta table","source":"23b1022f08c8d21.txt","type":"text/plain","size":89},{"uid":"aebc8be88d496745","name":"stdout","source":"aebc8be88d496745.txt","type":"text/plain","size":6143}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":6,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Immunization Service"},{"name":"suite","value":"Create the immunization event for a patient"},{"name":"feature","value":"Create the immunization event for a patient"},{"name":"tag","value":"vaccine_type_RSV"},{"name":"tag","value":"patient_id_Random"},{"name":"tag","value":"supplier_name_RAVS"},{"name":"tag","value":"Create_Feature"},{"name":"tag","value":"Delete_cleanUp"},{"name":"parentSuite","value":"features.APITests.steps"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2457-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"features.APITests.steps.test_create_steps"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["Create_Feature","patient_id_Random","supplier_name_RAVS","vaccine_type_RSV","Delete_cleanUp"]},"source":"1317def91b5d2f9.json","parameterValues":[]}