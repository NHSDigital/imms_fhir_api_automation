name: FHIR API and Batch Automation - E2E Tests

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "int"
        type: choice
        options:
          - pre-prod
          - int
      testPath:
        description: "Test to execute"
        required: true
        default: "APITests"
        type: choice
        options:
          - APITests
          - batchTests
          - API&batchTests

jobs:
  test:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
      checks: write
    steps:
      - name: Connect to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::${{ secrets.AWS_IAM_ACCOUNT }}:role/auto-ops
          role-session-name: github-actions

      - name: Whoami
        run: aws sts get-caller-identity

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          set -o pipefail
          echo "Creating virtual environment"
          python -m venv venv
          source venv/bin/activate
          echo "Upgrading pip"
          python -m pip install --upgrade pip 2> pip_error.log || {
            echo "Failed to upgrade pip"
            cat pip_error.log
            exit 1
          }
          echo "Installing requirements"
          pip install -r requirements.txt 2> req_error.log || {
            echo "Failed to install requirements.txt"
            cat req_error.log
            exit 1
          }
          pip install allure-pytest 2> allure_error.log || {
            echo "Failed to install allure-pytest"
            cat allure_error.log
            exit 1
          }  

      - name: Run Pytest-BDD tests for ${{ inputs.testPath }}
        env:
          auth_url: ${{ vars.auth_url }}
          token_url: ${{ vars.token_url }}
          callback_url: ${{ vars.callback_url }}
          Postman_Auth_client_Id: ${{ secrets.Postman_Auth_client_Id }}
          Postman_Auth_client_Secret: ${{ secrets.Postman_Auth_client_Secret }}
          username: ${{ secrets.username }}
          scope: ${{ vars.scope }}
          RAVS_client_Id: ${{ secrets.RAVS_client_Id }}
          RAVS_client_Secret: ${{ secrets.RAVS_client_Secret }}
          MAVIS_client_Id: ${{ secrets.MAVIS_client_Id }}
          MAVIS_client_Secret: ${{ secrets.MAVIS_client_Secret }}
          OPTUM_client_Id: ${{ secrets.OPTUM_client_Id }}
          OPTUM_client_Secret: ${{ secrets.OPTUM_client_Secret }}
          SONAR_client_Id: ${{ secrets.SONAR_client_Id }}
          SONAR_client_Secret: ${{ secrets.SONAR_client_Secret }}
          baseUrl: ${{ vars.baseUrl }}
          aws_token_refresh: 'False'
          PYTHONPATH: ${{ github.workspace }}
          S3_env: ${{ vars.S3_ENV }}
        run: |
          TEST_PATH="${{ inputs.testPath }}"

          if [ "$TEST_PATH" = "API&batchTests" ]; then
            TEST_PATH="features"
          else
            TEST_PATH="features/$TEST_PATH"
          fi

          echo "Using test path: $TEST_PATH"
          echo "Activating virtual env"
          source venv/bin/activate

          echo "Running Pytest-BDD tests"
          pytest "$TEST_PATH" --junitxml=output/test-results.xml --alluredir=output/allure-results

          if [ $? -ne 0 ]; then
            echo "Pytest-BDD tests failed"
            exit 1
          else  
            echo "Pytest-BDD tests completed successfully"
          fi
                    
      - name: Publish test results to GitHub UI
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: BDD Test Summary
          path: '**/output/test-results.xml'
          reporter: java-junit
          fail-on-error: false

      - name: Load test report history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: build/allure-results

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history